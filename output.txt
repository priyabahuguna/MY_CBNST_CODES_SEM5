/*
				Output For Bisection.c

Name: Priya Bahuguna 
Roll No: 44 
Section: C
				****BISECTION METHOD****

Enter two guesses : 
Enter tolerance : 
 Itr	 x0			 x1			 x2			 f(x2)
0	 1.000000	 3.000000	 2.000000	 -1.000000
1	 2.000000	 3.000000	 2.500000	 5.625000
2	 2.000000	 2.500000	 2.250000	 1.890625
3	 2.000000	 2.250000	 2.125000	 0.345703
4	 2.000000	 2.125000	 2.062500	 -0.351318
5	 2.062500	 2.125000	 2.093750	 -0.008942
6	 2.093750	 2.125000	 2.109375	 0.166836
7	 2.093750	 2.109375	 2.101563	 0.078562
8	 2.093750	 2.101563	 2.097656	 0.034714
9	 2.093750	 2.097656	 2.095703	 0.012862
10	 2.093750	 2.095703	 2.094727	 0.001954
11	 2.093750	 2.094727	 2.094238	 -0.003495
12	 2.094238	 2.094727	 2.094482	 -0.000771
13	 2.094482	 2.094727	 2.094604	 0.000592
The final approximate root is at x = 2.094543
Number of iterations: 14
				
				Output For Bisection2ndeq.c

Name: Priya Bahuguna 
Roll No: 44 
Section: C
				****BISECTION METHOD****

Enter two guesses : 
Enter tolerance :
 Itr	 x0			 x1			 x2			 f(x2)
0	 0.000000	 1.000000	 0.500000	 0.053222
1	 0.500000	 1.000000	 0.750000	 -0.856061
2	 0.500000	 0.750000	 0.625000	 -0.356691
3	 0.500000	 0.625000	 0.562500	 -0.141294
4	 0.500000	 0.562500	 0.531250	 -0.041512
5	 0.500000	 0.531250	 0.515625	 0.006475
6	 0.515625	 0.531250	 0.523438	 -0.017362
7	 0.515625	 0.523438	 0.519531	 -0.005404
8	 0.515625	 0.519531	 0.517578	 0.000545
9	 0.517578	 0.519531	 0.518555	 -0.002427
10	 0.517578	 0.518555	 0.518066	 -0.000940
11	 0.517578	 0.518066	 0.517822	 -0.000197
12	 0.517578	 0.517822	 0.517700	 0.000174
The final approximate root is at x = 0.517761
Number of iterations: 13


			Output for Gauss_Elimination_Method.c

Name: Priya Bahuguna
Roll No: 44
Section: C
			Gauss Elimination Method
Enter the matrix order (n): 
Enter the augmented matrix (n x n+1):

After step 1, Intermediate Matrix:
1.00	-1.00	2.00	3.00	
0.00	3.00	1.00	2.00	
0.00	-1.00	-11.00	-22.00	

After step 2, Intermediate Matrix:
1.00	-1.00	2.00	3.00	
0.00	3.00	1.00	2.00	
0.00	0.00	-10.67	-21.33	

Upper Triangular Matrix
1.00	-1.00	2.00	3.00	
0.00	3.00	1.00	2.00	
0.00	0.00	-10.67	-21.33	

Final values:
x1 = -1.00
x2 = 0.00
x3 = 2.00

			Output for Gauss_Jordan.c

Name: Priya Bahuguna
Roll No: 44
Section: C
			Gauss Jordan Method
Enter the matrix order (n): 
Enter the augmented matrix (n x n+1):
After step 1, Intermediate Matrix:
1.00	-1.00	2.00	3.00	
0.00	3.00	1.00	2.00	
0.00	-1.00	-11.00	-22.00	
After step 2, Intermediate Matrix:
1.00	0.00	2.33	3.67	
0.00	1.00	0.33	0.67	
0.00	0.00	-10.67	-21.33	
Upper Triangular Matrix
1.00	0.00	0.00	-1.00	
0.00	1.00	0.00	0.00	
-0.00	-0.00	1.00	2.00	

Solution:
x1 = -1.00
x2 = 0.00
x3 = 2.00

			Output for Iteration.c

Name: Priya Bahuguna
Roll No: 44
Section: C
			Iteration Method

Enter first guess = 
Enter second guess = 
Enter the tolerance = 
Iteration		x0		f(x0)
0			0.000000		2.000000
1			0.666667		-0.214113
2			0.595296		0.042095
3			0.609328		-0.007950
4			0.606678		0.001514
5			0.607182		-0.000288
Root found: x = 0.607086

			Output for Iteration2.c


			Output for Iteration3.c


                        Output for NewtonBackward.c

Name: Priya Bahuguna
Roll No: 44
Section: C
			Newton Backward Interpolation Method
Enter the number of data points: 
Enter the data points (year and population):

Calculating population for the year: 
Backward Difference Table:
   x      f(x)   ∇^1 f(x)   ∇^2 f(x)   ∇^3 f(x)   ∇^4 f(x)   
1891.00   46.00   
1901.00   66.00   20.00   
1911.00   81.00   15.00   -5.00   
1921.00   93.00   12.00   -3.00   2.00   
1931.00   101.00   8.00   -4.00   -1.00   -3.00   
Result:
Year: 1925	Population: 96.84

                        Output for NewtonForward.c

Name: Priya Bahuguna
Roll No: 44
Section: C
			Newton Forward Interpolation Method
Enter the number of data points: 
Enter the data points (year and population):
Calculating population for the year: 

Forward Difference Table:
   x      f(x)   Δ^1 f(x)   Δ^2 f(x)   Δ^3 f(x)   Δ^4 f(x)   
1891.00   46.00   20.00   -5.00   2.00   -3.00   
1901.00   66.00   15.00   -3.00   -1.00   
1911.00   81.00   12.00   -4.00   
1921.00   93.00   8.00   
1931.00   101.00   
Result:
Year: 1895	Population: 54.85

                        Output for NewtonRaphson.c
Name: PRIYA BAHUGUNA 
Roll No: 44 
Section: C
		NEWTON RAPHSON METHOD

Enter 2 guesses = 
Enter tolerance = 
Iters	 x_prev		 x1_new		 x2		 
0	 0.000000	 1.000000	 -2.177980
1	 1.000000	 0.653079	 -0.460642
2	 0.653079	 0.531343	 -0.041803
3	 0.531343	 0.517910	 -0.000464
4	 0.517910	 0.517757	 -0.000000
5	 0.517757	 0.517757	 -0.000000
approx root after 5 iters is : 0.517757

                        Output for RegulaFalsi.c

Name: Priya Bahuguna 
Roll No: 44 
Section: C
				****REGULAR FALSI METHOD****

Enter two guesses : 
Enter tolerance :
 Itr	 x0			 x1			 x2			 f(x2)
0	 0.000000	 1.000000	 0.314665	 0.519871
1	 0.314665	 1.000000	 0.446728	 0.203545
2	 0.446728	 1.000000	 0.494015	 0.070802
3	 0.494015	 1.000000	 0.509946	 0.023608
4	 0.509946	 1.000000	 0.515201	 0.007760
5	 0.515201	 1.000000	 0.516922	 0.002539
6	 0.516922	 1.000000	 0.517485	 0.000829
7	 0.517485	 1.000000	 0.517668	 0.000271
8	 0.517668	 1.000000	 0.517728	 0.000088
The final approximate root is at x = 0.517728
Number of iterations: 9


                        Output for RegularFalsi2nd.c
Name: Priya Bahuguna 
Roll No: 44 
Section: C
				****REGULAR FALSI METHOD****

Enter two guesses : 
Enter tolerance :
 Itr	 x0			 x1			 x2			 f(x2)
0	 0.000000	 1.000000	 0.314665	 0.519871
1	 0.314665	 1.000000	 0.446728	 0.203545
2	 0.446728	 1.000000	 0.494015	 0.070802
3	 0.494015	 1.000000	 0.509946	 0.023608
4	 0.509946	 1.000000	 0.515201	 0.007760
5	 0.515201	 1.000000	 0.516922	 0.002539
6	 0.516922	 1.000000	 0.517485	 0.000829
7	 0.517485	 1.000000	 0.517668	 0.000271
8	 0.517668	 1.000000	 0.517728	 0.000088
The final approximate root is at x = 0.517728
Number of iterations: 9

                        Output for Secant.c

Name: Priya Bahuguna
Roll No: 44
Section: C
			Secant Method

Enter first guess = 
Enter second guess = 
Enter max iteration = 
Enter the tolerance =
 Itr	 x0			 x1			 x2			 f(x2)

0	 2.000000 	 3.000000 	 2.900000 	 -0.711000

1	 3.000000 	 2.900000 	 2.941555 	 -0.021473

2	 2.900000 	 2.941555 	 2.942849 	 0.000487

3	 2.941555 	 2.942849 	 2.942820 	 -0.000000

The root is x = 2.942820
Total Number of Iterations = 4
*/			















